// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Wallet {
  id                       Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  name                     String
  chain                    Chain?
  walletAddress            String?
  onChainBalance           Decimal                    @default(0)
  onChainBalanceLocal      Decimal                    @default(0)
  onChainBalanceDiff       Decimal                    @default(0)
  serviceBalance           Decimal                    @default(0)
  serviceBalanceLocal      Decimal                    @default(0)
  serviceBalanceDiff       Decimal                    @default(0)
  balanceDiff              Decimal                    @default(0) // onChainBalance - serviceBalance
  balanceCheckDiff         Decimal                    @default(0) // onChainBalance - serviceBalanceLocal
  decimals                 Int
  symbol                   String
  type                     TokenInfoType
  virtual                  Boolean
  tokenAddress             String?
  BlockpitTransaction      BlockpitTransaction[]
  Entry                    Entry[]
  EntryComparison          EntryComparison[]
  MoralisErc20Transaction  MoralisErc20Transaction[]
  MoralisNativeTransaction MoralisNativeTransaction[]

  @@index([chain, name, walletAddress])
}

model MoralisErc20Transaction {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  chain            Chain
  transactionHash  String
  address          String
  blockTimestamp   DateTime
  blockNumber      Decimal
  blockHash        String
  toAddress        String
  fromAddress      String
  value            Decimal
  transactionIndex Int
  logIndex         Int
  possibleSpam     Boolean
  wallet           Wallet   @relation(fields: [walletId], references: [id])
  walletId         Int

  @@index([transactionHash])
}

model MoralisNativeTransaction {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  chain     Chain
  type      NativeTransactionType

  from              String
  to                String?
  nonce             Decimal?
  gas               Decimal?
  gasPrice          Decimal
  cumulativeGasUsed Decimal
  gasUsed           Decimal
  fee               Decimal
  value             Decimal?
  index             String
  blockNumber       Decimal
  blockHash         String
  blockTimestamp    DateTime
  contractAddress   String?
  transactionHash   String?

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId Int
}

model BlockpitTransaction {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  blockpitId      String
  timestamp       DateTime
  sourceType      String
  sourceName      String
  integration     String
  transactionType String
  outgoingAsset   String?
  outgoingAmount  Decimal?
  incomingAsset   String?
  incomingAmount  Decimal?
  feeAsset        String?
  feeAmount       Decimal?
  transactionId   String
  note            String?
  mergeId         String?
  excluded        Boolean
  ignore          Boolean
  wallet          Wallet   @relation(fields: [walletId], references: [id])
  walletId        Int

  @@index([transactionId])
}

model Entry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      EntryType

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId Int

  date        DateTime
  balance     Decimal
  feePerDay   Decimal
  valuePerDay Decimal
  value       Decimal
  fee         Decimal
  tx          String
  method      String
  ignored     Boolean

  @@index([tx])
}

model EntryComparison {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      EntryType

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId Int

  date        DateTime
  balance     Decimal
  feePerDay   Decimal
  valuePerDay Decimal
  value       Decimal
  fee         Decimal
  tx          String
  method      String
  ignored     Boolean

  compBalance     Decimal
  compFeePerDay   Decimal
  compValuePerDay Decimal
  compFee         Decimal
  compValue       Decimal

  diffBalance     Decimal
  diffFeePerDay   Decimal
  diffValuePerDay Decimal
  diffFee         Decimal
  diffValue       Decimal

  @@index([tx])
}

enum EntryType {
  SERVICE
  NATIVE
  ERC20
}

enum NativeTransactionType {
  TX
  INTERNAL_TX
}

enum TransactionType {
  CHAIN
  SERVICE
}

enum TokenInfoType {
  NATIVE
  ERC20
}

enum Chain {
  BTC
  BNB
  ETH
  MATIC
  SOLANA
  ARBITRUM
  ARBITRUM_NOVA
  ARBITRUM_ONE
  OPTIMISM
}
